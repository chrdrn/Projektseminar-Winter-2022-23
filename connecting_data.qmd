---
title: "Connecting Data and Initial Cleanup"
author: "Julius Klingelhoefer"
format: html
embed-resources: true
editor: visual
editor_options: 
  chunk_output_type: console
---

## Setup

### Installing & Loading Packages

```{r}
#| echo: FALSE
#| output: FALSE

if (!require("pacman")) install.packages("pacman")
pacman::p_load(
  tidyverse, 
  dplyr, 
  janitor, 
  renv, 
  readxl,
  lubridate,
  svglite,
  svgtools,
  knitr,
  kableExtra,
  jtools,
  sjmisc,
  sjPlot
  )
```

Active packages:

```{r}
#| echo: FALSE
(.packages())
```

### Loading Data

```{r}
#| echo: FALSE

# getting name of  files in each directory ordered newest to oldest
# recording which file it is in "file_origin"
file_list = fileSnapshot("study/data/xlsx")[1] %>% data.frame(.) %>% 
  arrange(desc(info.mtime)) %>%
  rownames_to_column("file_name") %>% 
  mutate(
    file_origin = 
      ifelse(
        str_count(file_name, fixed("WITH_logging")),
        "yes_logging",
        ifelse(
          str_count(file_name, fixed("NO+LOGGING")),
          "no_logging",
          ifelse(
            str_count(file_name, fixed("data_abschalten")),
            "pre_survey",
            NA
          )
        )
      )
  )
  
# Copying newest files, overwriting old files
paste("Copying file", file_list %>% filter(file_origin == "pre_survey") %>% .[1,1])
file.copy(from = 
            paste0(
              "study/data/xlsx/",
              file_list %>% filter(file_origin == "pre_survey") %>% .[1,1]
              ),
          to = "study/data/pre_survey.xlsx", 
          overwrite = T)

paste("Copying file", file_list %>% filter(file_origin == "no_logging") %>% .[1,1])
file.copy(from = 
            paste0(
              "study/data/xlsx/",
              file_list %>% filter(file_origin == "no_logging") %>% .[1,1]
              ),
          to = "study/data/esm_no_logging.xlsx", 
          overwrite = T)

paste("Copying file", file_list %>% filter(file_origin == "yes_logging") %>% .[1,1])
file.copy(from = 
            paste0(
              "study/data/xlsx/",
              file_list %>% filter(file_origin == "yes_logging") %>% .[1,1]
              ),
          to = "study/data/esm_yes_logging.xlsx", 
          overwrite = T)

# Loading data
pre_survey_raw = clean_names(read_excel("study/data/pre_survey.xlsx"))
print("loaded pre-survey")
esm_no_logging_raw = clean_names(read_excel("study/data/esm_no_logging.xlsx"))
print("loaded study version without logging")
esm_yes_logging_raw = clean_names(read_excel("study/data/esm_yes_logging.xlsx"))
print("loaded study version with logging")

rm(file_list)
```

### Combining ESM data

```{r}
#| echo: FALSE

# Creating unique IDs for version with and without logging
esm_no_logging_raw = esm_no_logging_raw  %>% 
  mutate(id = paste0("nl", participant), .before = "participant")
esm_yes_logging_raw = esm_yes_logging_raw %>% 
  filter(participant != 4 & participant != 6) %>% 
    #ID 4 and 6 were reserved to test if forms are working
  mutate(id = paste0("yl", participant), .before = "participant")

# joining esm-datasets
esm_raw = bind_rows(esm_no_logging_raw, esm_yes_logging_raw)
rm(esm_no_logging_raw, esm_yes_logging_raw)

# removing unneccessary variables (those created by texts, etc.)
esm_raw = esm_raw %>% 
  select(
    -text_0,
    -blank_1,
    -text_1,
    -text_2,
    -item_863,
    -item_607,
    -item_895,
    -text_3,
    -item_1403,
    -text_6,
    -item_902,
    -item_910,
    -item_969,
    -item_1057,
    -item_986,
    -item_1114,
    -item_1114_copy1233,
    -item_1114_copy1233_copy1413,
    -item_1478,
    -item_1383,
    -item_753,
    -item_798,
    -item_938_copy1728,
    -item_841_copy852,
    -item_841,
    -item_662,
    -item_670,
    -item_476,
    -item_646,
    -item_1019,
    -item_617,
    -item_633,
    -item_638,
    -item_708,
    -welcome_text,
    -welcome_text_copy521,
    -welcome_text_copy527,
    -welcome_text_copy527_copy735,
    -item_1427,
    -item_1432,
    -item_673,
    -item_848_copy856,
    -item_848,
    -item_868,
    -item_879,
    -item_916,
    -item_738,
    -item_1151,
    -item_1642,
    -item_551,
    -item_1519_copy1527,
    -item_1382,
    -item_1390,
    -item_1406,
    -item_673_copy887,
    -item_916_copy931,
    -item_1443,
    -item_1393,
    -item_1404,
    -item_656,
    -item_768,
    -item39424,
    -item_792,
    -item_810,
    -item_820,
    -item_820_copy760,
    -item_1151,
    -item_1642,
    -item_551,
    -item_1519_copy1527,
    -welcome_text_copy515,
    -item_1382,
    -item_1390,
    -item_1406,
    -item_673_copy887,
    -item_1393,
    -item_1506,
    -item_1514,
    -item985
    ) %>% 
  rename(
    text_comment = item_730,
    reward_choice = item_484,
    feedback_study_results = feedback_copy896,
    motivation_well_being_day = motivation_wellbeing_day_copy1730,
    motivation_social_day = motivation_social_day_copy1731,
    motivation_distraction_day = motivation_distraction_day_copy1729
  ) %>%
# Filtering out all cases before 11/14/2022, as these are tests
  filter(trigger_date >= "2022-11-14")

# Moving the values from the daily questionnaire to the appropriate column (without "_1" suffix)
eod = esm_raw %>% filter(form == "b End of Day") %>% 
  mutate(
    wb_ge = wb_ge_1,
    wb_energy = wb_energy_1,
    wb_stress = wb_stress_1,
    wb_connect = wb_connect_1,
    procra = procra_1,
    screentime_work = screentime_work_1,
    screentime_leisure = screentime_leisure_1,
    disco_1 = disco_1_1,
    disco_2 = disco_1_2,
    disco_3 = disco_1_3,
    disco_4 = disco_1_4,
    disco_5 = disco_1_5,
    disco_6 = disco_1_6,
    disco_sd = disco_sd_1,
    motivation_distraction = motivation_distraction_1,
    motivation_wellbeing = motivation_wellbeing_1,
    motivation_social = motivation_social_1,
    ns_autonomy = ns_autonomy_1,
    ns_competence = ns_competence_1,
    ns_relatedness = ns_relatedness_1,
    media_category_1 = media_category_1_1,
    media_category_2 = media_category_1_2,
    media_category_3 = media_category_1_3,
    media_category_4 = media_category_1_4,
    media_category_5 = media_category_1_5,    
    media_category_6 = media_category_1_6,
    media_category_7 = media_category_1_7,
    goal_conf = goal_conf_1
  )

# selecting only cases that were not end of day questionnaires
sit = esm_raw %>% filter(form != "b End of Day")

# Binding rows together and removing old variables
esm_raw = 
  bind_rows(sit, eod) %>% 
  select(
    -wb_ge_1,
    -wb_energy_1,
    -wb_stress_1,
    -wb_connect_1,
    -procra_1,
    -screentime_work_1,
    -screentime_leisure_1,
    -disco_1_1,
    -disco_1_2,
    -disco_1_3,
    -disco_1_4,
    -disco_1_5,
    -disco_1_6,
    -disco_sd_1,
    -motivation_distraction_1,
    -motivation_wellbeing_1,
    -motivation_social_1,
    -ns_autonomy_1,
    -ns_competence_1,
    -ns_relatedness_1,
    -media_category_1_1,
    -media_category_1_2,
    -media_category_1_3,
    -media_category_1_4,
    -media_category_1_5,    
    -media_category_1_6,
    -media_category_1_7,
    -goal_conf_1
  ) %>% 
  mutate(
    date_day = as.Date(trigger_date, "%d/%m,/%y", tz = attr(trigger_date, "tzone")),
    time_day = format(trigger_date, format = "%H:%M:%S"),
    .before = "trigger_date"
  )
rm(eod, sit) # removing no longer needed data sets

# Calculating which probe number per day it was 
esm_raw = esm_raw %>% 
  mutate(
    probe_time = 
      ifelse(
        trigger == "Button Pressed: Tagesabschluss-Fragebogen starten",
        format(trigger_date, format = "%H:%M"),
        ifelse(
          str_sub(trigger, 1, 11) == "Random Time",
          str_sub(trigger, -5),
          NA
        )
      ),
  .before = "participant")

esm_raw = esm_raw %>%
  mutate(
    date_day_hm = 
      paste0(
        hour(trigger_time), ":",
        formatC(minute(esm_raw$trigger_time), width = 2, flag = "0")
        ),
    .after = "probe_time")

days = esm_raw %>% 
  group_by(id) %>% 
  summarise(
    day_min = min(format(trigger_date, "%d.%m.%y")), 
    day_newest = max(unique(format(trigger_date, "%d.%m.%y"))) 
  ) %>% 
  mutate(
    # adding one day because study starts 1 day after coupling
    day_start = as.Date(parse_date_time(day_min, "dmy")) + 1,
    day_newest = as.Date(parse_date_time(day_newest, "dmy"))
  )

# Joining day variables to pre-survey dataset
esm_raw = merge(esm_raw, days, by = "id") 

rm(days)

print("first variables are:") 
paste(colnames(esm_raw)[1:20])
```

## Adding probe fill-out duration

```{r}
esm_raw = esm_raw %>% 
  mutate(
    dur = as.numeric(form_finish_date - form_start_date)
  )

# boxplot(esm_raw$dur, ylim = c(0, 600)) # uncomment to get boxplot


```

### Cleaning Up Pre-Survey and Joining with ESM-Data

```{r}
#| echo: FALSE

pre_survey_raw = pre_survey_raw %>% 
  rename(
    disco_practice_other = dx05_01,
    comment_pre_survey = fi04_01,
    sd_education_text = sd05_09,
    wb_ge = wb03,
    device_type = ur04_fm_f,
    logging_choice = fi03
  ) %>% 
  mutate(
    id = ifelse(
      !is.na(ur01),
      paste0("nl", ur01 + 9), 
      # adding 9 because ids 1-9 are reserved for pretest/problems
      ifelse(
        !is.na(ur02),
        paste0("yl", ur02 + 9),
        # adding 9 because ids 1-9 are reserved for pretest/problems
        NA
      )
    ),
    logging = 
      ifelse(
        !is.na(ur01),
        FALSE,
        ifelse(
          !is.na(ur02),
          TRUE,
          NA
        )
      ),
    .before = "case") %>% 
  rename_with(.cols = case:deg_time, .fn = ~ paste0(.x, "_pre")) %>% 
  select( 
    # removing all no longer needed urn variables
    -ur01_cp_pre,
    -ur01_pre,
    -ur02_cp_pre,
    -ur02_pre,
    -ur08_pre,
    -ur08_01_pre
    ) %>%
  # Giving participants without an id an id
  mutate(
    id = ifelse(
      is.na(id),
      paste0("xl", row_number()),
      id
      )
    )

# Adding in participants who started a new ID due to technical isues

## reading new ids
new_ids = read_excel("study/data/new_ids.xlsx")

for(i in 1:length(new_ids))
  {

## updating ids in pre-survey
  pre_survey_raw = pre_survey_raw %>% 
    mutate(
      id = ifelse(
        id == toString(new_ids[i, "old_id"]),
        # adding new id to dataset
        new_ids[i, "new_id"],
        id
        )
    )
## Changing id for existing esm probes (if any exist) 
  esm_raw = esm_raw %>% 
    mutate(
      id = ifelse(
        id == toString(new_ids[i, "old_id"]),
        # adding new id to dataset
        new_ids[i, "new_id"],
        id
        )
    )
  }

rm(new_ids)
paste("Updated", i, "participant's IDs")

#converting ids in both datasets to strings
pre_survey_raw = pre_survey_raw %>% mutate(id = as.character(id))
esm_raw = esm_raw %>% mutate(id = as.character(id))

# Creating raw joined data frame
dl_raw = full_join(
 esm_raw, 
 pre_survey_raw, 
 by = "id")

# Removing participants who requested their data deleted
delete_requests = read_excel("study/data/delete_requests.xlsx")
for (i in 1:length(delete_requests$id)) 
  {
  dl_raw = dl_raw %>%
    filter(
      id != delete_requests$id[i]
  )
  print(delete_requests$id[i])
}

rm(delete_requests)
```

### Creating filter variable for only valid, completed probes, calculating compliance

```{r}
# adding variable that indicates valid probes only
### Note that movisensXS sometimes records the wrong trigger action, thus, we have to base the validity of each probe on whether the first and last item were filled out.This is additionally beneficial because it includes probes in which participants filled out the last probe of the day with the situational measurements but quit before finishing the additional questions in the end of day probe

dl_raw = dl_raw %>% 
  mutate(
    valid_probe = ifelse(
      # wb_ge is the first variable in each sit. questionnaire
      !is.na(wb_ge) & 
        #goal_conf is the last variable
        !is.na(goal_conf), 
      T,
      F),
      .after = "trigger"
    )

print("Valid probes:")
table(dl_raw$valid_probe, useNA = "ifany")

# calculating compliance
compliance = dl_raw %>%
  group_by(id) %>% 
  summarise(
    valid_probes_sum = sum(valid_probe, na.rm = T),
    compliance = sum(valid_probe, na.rm = T)/70
  )
table(compliance$compliance > .4)

# adding compliance information
dl_raw = full_join(dl_raw, compliance, by = "id")
rm(compliance)

# creating histogram
# dl_raw %>% group_by(id) %>%
#   summarise(compliance = mean(compliance)) %>%
#   select(compliance) %>%
#   # filter(compliance != 0) %>% # filtering out those with 0 compliance
#   pull() %>%
#   hist()

# Giving each observation a unique id
dl_raw$probe_id = 1:nrow(dl_raw) 
dl_raw = dl_raw %>% relocate("probe_id")
```

### Identifying which \# of probe per day it was

```{r}
dl_raw = dl_raw %>% 
  mutate(
    probe_start = strftime(form_start_date, format="%H:%M:%S", tz = "UTC"),
    trigger_time_internal = 
      ifelse(
        valid_probe == T,
        ifelse(
          str_sub(trigger, 1, 11) == "Random Time",
          str_sub(trigger, -5),
          NA),
        NA),
    .after = "id"
  )


dl_raw = dl_raw %>% 
  mutate(
    probe_num = 
      ifelse(
        valid_probe == T,
        # adding 4 min. 59s to each end-time to account for delays
        ifelse(
          probe_start > "09:00:00" & probe_start < "09:55:59",
          1,
          ifelse(
            probe_start > "11:51:00" & probe_start < "12:46:59",
            2,
            ifelse(
              probe_start > "14:42:00" & probe_start < "15:37:59",
              3,
              ifelse(
                probe_start > "17:33:00" & probe_start < "18:28:59",
                4,
                ifelse(
                  probe_start > "20:24:00" & probe_start < "21:19:59",
                  5,
                  NA
                )
              )
            )
          )
        ),
        NA),
    .before = "trigger"
  ) %>% 
  mutate(
    probe_num = 
      ifelse(
        is.na(probe_num) & valid_probe == T,
        # adding 5 min. to each end-time to account for delays
        ifelse(
          trigger_time_internal > "09:00" & trigger_time_internal < "09:56",
          1,
          ifelse(
            trigger_time_internal > "11:51" & trigger_time_internal < "12:47",
            2,
            ifelse(
              trigger_time_internal > "14:42:00" & trigger_time_internal < "15:38",
              3,
              ifelse(
                trigger_time_internal > "17:33:00" & trigger_time_internal < "18:29",
                4,
                ifelse(
                  trigger_time_internal > "20:24:00" & trigger_time_internal < "21:20",
                  5,
                  NA
                )
              )
            )
          )
        ),
        probe_num)
  ) %>% 
  mutate(
    probe_num =
      ifelse(
        is.na(probe_num) & 
          valid_probe == T &
          probe_start > "21:00:00" &
          probe_start < "23:59:00",
        5,
        probe_num)
  )


unidentifiable = dl_raw %>% filter(valid_probe == T)
table(unidentifiable$probe_num, useNA = "ifany")
rm(unidentifiable)
```

## Getting data for individual feedback

```{r}
pins = dl_raw %>% 
  filter(
    !is.na(feedback_pin)
  ) %>% 
  mutate(
    pin_f = feedback_pin,
    .after = "id"
  )

# identifying duplicate pins
duplicate_pins = as.data.frame(table(pins$id)) 
duplicate_pins$Var1 = as.character(duplicate_pins$Var1)



for(i in 1:length(duplicate_pins$Freq))
{
  # creating additional ids
  for(ii in 1:duplicate_pins[i, "Freq"])
  {
    duplicate_pins = duplicate_pins %>% 
      mutate(
        "id_{ii}" := ifelse(
          Freq == ii | Freq > ii,
          paste0(Var1, "_", ii),
          NA))
  }
}

#renaming id variable, adding study version
duplicate_pins = duplicate_pins %>% 
  rename(
    id = Var1
  )

  


str_split("nl213", c("nl", "yl"))[[1]][2]



logging = 1
no_logging = 2
```

## Cleaning up, making anonymization stonger by generating new IDs

```{r}
# Creating new id that does not include the matching information anymore
dl_raw = dl_raw %>%
  select(!participant) %>% 
  group_by(id) %>% 
  mutate(
  id = cur_group_id())

# removing old datasets
rm(esm_raw, pre_survey_raw)
```

# Exporting Dataset

```{r}
save(dl_raw, file = "study/data_long.Rda")
print('saved file as "data_long.Rda"' )
```
