---
title: "Projektseminar"
subtitle: "Visualisierung"
title-slide-attributes:
  data-background-image: ../../images/background_dark_red.svg
  data-background-size: cover
  data-background-opacity: ".5"
  data-background-color: "#041E42"
author: 
  - name: Julius Klingelhoefer 
    url: https://twitter.com/klingelhoefer_j/
    affiliation: Juniorprofessur f√ºr Kommunikationswissenschaft
    affiliation-url: https://www.kommunikationswissenschaft.rw.fau.de/julius-klingelhoefer/
date: "`r Sys.Date()`" 
date-format: "DD.MM.YYYY"
format:
  revealjs:
    include-in-header: ../eventlistener.html
    width: 1920
    height: 1080
    menu: false
    toc: true
    toc-depth: 1
    toc-title: "Inhalt"
    auto-animate-duration: 0.5
    auto-animate-easing: ease-in-out
    transition: slide
    background-transition: fade
    transition-speed: fast
    theme: [../slidetheme.scss]
    fontsize: 5em
    #template-partials:
    slide-number: c
    chalkboard:
      buttons: false
      theme: whiteboard
    preview-links: auto
    logo: ../../images/logo.svg
    link-external-icon: true
    link-external-newwindow: true
    link-external-filter: '^(?:http|https):\/\/klingelhoefer.github.io'
    resources: 
      - "kendal-unsplash.jpg"
    #footer: "[Projektseminar 22/23](https://github.com/klingelhoefer/Projektseminar-Winter-2022-23)"
comments:
  hypothesis: 
    theme: clean
execute:
  echo: true
filters: 
  - ../bg_style.lua
bibliography: references.bib
csl: ../apa.csl
editor_options: 
  chunk_output_type: console
---

# Housekeepingüßπ

```{r}
#| echo: false
if (file.exists("study/data/data_long.Rda")) {
    base::load("study/data/data_long.Rda")}
if (file.exists("../../study/data/data_long.Rda")) {
    base::load("../../study/data/data_long.Rda")}
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
  tidyverse,
  dplyr, # loading dplyr again to avoid masking issues
  janitor,
  renv,
  readxl,
  lubridate,
  svglite,
  svgtools,
  knitr,
  kableExtra,
  jtools,
  sjmisc,
  sjPlot,
  labelled,
  xlsx,
  ggplot2,
  plotly,
  lme4
  )

df_raw = dl_raw %>% 
  group_by(id) %>% 
  summarise_all(first)
```

## Binder

-   Wenn Sie `Binder` verwenden, jetzt starten.

## Deadline Seminarbericht

-   Vorschlag: 31.03.2023

## Vorschau auf n√§chste Woche:

-   Evaluation
-   Ergebnisbericht
-   Zus√§tzliche Materialien

# Grafiken mit ggplot

## Beispiel Histogram

::: columns
::: {.column width="50%"}
```{r}
#| out.width="50%"
p = df_raw %>% 
  filter(compliance_corrected > 0) %>% 
  ggplot(data = .) +
  aes(x = compliance_corrected) +
  geom_histogram(binwidth = .05) +
  xlab("Compliance (excl. 0)") +
  theme_bw() +
  theme(text = element_text(size = 25)) 
```
:::

::: {.column width="50%"}
```{r}
p # call graph
```
:::
:::

## Die Logik von ggplot

-   Schritt f√ºr schritt und `layer by layer`
-   Mit `+` f√ºgen wir neue Elemente hinzu
-   Wir haben immer:
    -   Daten

    -   Mapping: "Aesthtetics" (`aes()`)

    -   Geom: Plottet die Grafik aus Daten und Mapping

## Basis {auto-animate="T"}

::: columns
::: {.column width="50%"}
```{r}
p = ggplot(data = dl_raw)
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
p
```
:::
:::

## Aesthetics {auto-animate="T"}

::: columns
::: {.column width="50%"}
```{r}
p = ggplot(data = dl_raw) +
  aes(x = wb_energy, y = wb_connect)
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
p
```
:::
:::

## Geom {auto-animate="T"}

::: columns
::: {.column width="50%"}
```{r}
p = ggplot(data = dl_raw) +
  aes(x = wb_energy, y = wb_connect) +
  geom_jitter()
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
p
```
:::
:::

## Geom {auto-animate="T"}

::: columns
::: {.column width="50%"}
Verschiedene Geoms f√ºr diverse Darstellungen existieren, z.B.:

-   `geom_bar`
-   `geom_point`
-   `geom_boxplot`
-   `geom_qq_line()`
-   uvm.
:::

::: {.column width="50%"}
```{r}
#| echo: false
p
```
:::
:::

## Geom {auto-animate="T"}

::: columns
::: {.column width="50%"}
Wir k√∂nnen `geom`s mit `+` kombinieren

```{r}
# getting slope and intercept for regression line
lm = lm(wb_energy~wb_connect, dl_raw)

p = ggplot(data = dl_raw) +
  aes(x = wb_energy, y = wb_connect) +
  geom_jitter() +
  geom_abline(
    slope = lm$coefficients[2],
    intercept = lm$coefficients[1],
    size = 2,
    color = "maroon"
      )
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
p
```
:::
:::

## Beschriftungen {auto-animate="T"}

::: columns
::: {.column width="50%"}
```{r}
# getting slope and intercept for regression line
p = ggplot(data = dl_raw) +
  aes(x = wb_energy, y = wb_connect) +
  geom_jitter() +
  geom_abline(
    slope = lm$coefficients[2],
    intercept = lm$coefficients[1],
    size = 2,
    color = "maroon"
      ) +
  ggtitle("Scatterplot des Zusammenhangs von Verbundenheit und Energie") +
  ylab("Verbundenheit") +
  xlab("Energie")
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
p
```
:::
:::

## Themes {auto-animate="T"}

::: columns
::: {.column width="50%"}
```{r}
library(jtools)

p = ggplot(data = dl_raw) +
  aes(x = wb_energy, y = wb_connect) +
  geom_jitter() +
  geom_abline(
    slope = lm$coefficients[2],
    intercept = lm$coefficients[1],
    size = 2,
    color = "maroon"
      ) +
  ggtitle("Scatterplot des Zusammenhangs von Verbundenheit und Energie") +
  ylab("Verbundenheit") +
  xlab("Energie") +
  theme_apa()
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
p
```
:::
:::

## Bonus: Interactive Graphs

```{r}
# interactive figure with plotly package
ggplotly(p, width = 900, height = 500)
```

# Grafische Analyse von Voraussetzungen

üîô

## `performance`-Package

::: columns
::: {.column width="50%"}

-   Sie erinnern sich: Viele Voraussetzungen f√ºr lineare (multilevel-) Modelle pr√ºfen wir grafisch
-   Dazu haben wir kennengelernt: `performance::check_model()`
:::

::: {.column width="50%"}
```{r}
m0 = lmer(
  wb_ge ~ 1 + (1 | id), 
  data = dl_raw
  )
```
:::
:::

## Beispiel: Linearit√§t der Residuen

::: columns
::: {.column width="50%"}
```{r}
p = performance::check_model(m0, check = "linearity")

```
:::

::: {.column width="50%"}
```{r}
#| echo: false
p

```
:::
:::

## Beispiel: Varianzhomogenit√§t

::: columns
::: {.column width="50%"}
```{r}
p = performance::check_model(m0, check = "homogeneity")

```
:::

::: {.column width="50%"}
```{r}
#| echo: false
p

```
:::
:::

# Live-Coding {.coding}

üíª

# Fragen? {.questions}

# N√§chste Woche

üìä Pr√§sentation der vorl√§ufigen Ergebnisse
